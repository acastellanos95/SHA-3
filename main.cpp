#include <iostream>
#include <vector>
#include  <iomanip>
#include "Utils.h"

int main() {

  /* Test Keccak */
  std::vector<uint8_t> testVectorKeccak { 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
                          0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
                          0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
                          0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
                          0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  std::string testStringKeccak(testVectorKeccak.begin(), testVectorKeccak.end());

  /* Print test string in hex */
  std::cout << "Cadena de 200 bytes para probar Keccak: ";
  for(auto &c: testStringKeccak){
    std::cout << std::hex << std::setfill('0') << std::setw(2) << (int) ((uint8_t) c) << " ";
  }
  std::cout << "\n";

  auto testResultKeccak = KECCAK(testStringKeccak);

  /* Print result string in hex */
  std::cout << "Resultado de prueba de Keccak: ";
  for(auto &c: testResultKeccak){
    std::cout << std::hex << std::setfill('0') << std::setw(2) << (int) ((uint8_t) c) << " ";
  }
  std::cout << "\n";


  /* Test SHA-3 */

  std::string testStringSHA = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";

  /* Print test string */
  std::cout << "Cadena de entrada a SHA: " << testStringSHA << "\n";

  /* Print test string in hex */
  std::cout << "Cadena de entrada en hex: ";
  for(auto &c: testStringSHA){
    std::cout << std::hex << std::setfill('0') << std::setw(2) << (int) ((uint8_t) c) << " ";
  }
  std::cout << "\n";

  auto testResultSHA = SHA_3(testStringSHA);

  if(testResultSHA.size() != 64)
    throw std::runtime_error("El hash fallÃ³");

  /* Print test result in hex */
  std::cout << "SHA-3: ";
  for(size_t i = 0; i < 64; i += 8){
    std::cout << std::hex << std::setfill('0') << std::setw(2)  << (int) ((uint8_t) testResultSHA[i]) << (int) ((uint8_t) testResultSHA[i + 1]) << (int) ((uint8_t) testResultSHA[i + 2]) << (int) ((uint8_t) testResultSHA[i + 3]) << (int) ((uint8_t) testResultSHA[i + 4]) << (int) ((uint8_t) testResultSHA[i + 5]) << (int) ((uint8_t) testResultSHA[i + 6]) << (int) ((uint8_t) testResultSHA[i + 7]) << " ";
  }

  return 0;
}
